/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/script.js":
/*!***********************!*\
  !*** ./src/script.js ***!
  \***********************/
/***/ (() => {

eval("{\r\nconst chatBody = document.querySelector(\".chat-body\");\r\nconst messageInput = document.querySelector(\".message-input\");\r\nconst sendMessageButton = document.querySelector(\"#send-message\")\r\nconst fileInput = document.querySelector(\"#file-input\")\r\nconst fileUploadWrapper = document.querySelector(\".file-upload-wrapper\")\r\nconst fileCancelButton = document.querySelector(\"#file-cancel\")\r\nconst chatbotToggler = document.querySelector(\"#chatbot-toggler\")\r\nconst closeChatbot = document.querySelector(\"#close-chatbot\")\r\n\r\n\r\n// const API_KEY = \"AIzaSyBKObsvUjFeDIRcd_HOlVY5ehAh_ykXlkc\"\r\nconst API_KEY = \"AIzaSyBKObsvUjFeDIRcd_HOlVY5ehAh_ykXlkc\";\r\nconsole.log(API_KEY);\r\nconst API_URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent\";\r\n\r\nconst userData = {\r\n    message: null,\r\n    file: {\r\n        data: null,\r\n        mime_type: null\r\n    }\r\n}\r\n\r\nconst chatHistory = [];\r\nconst initialInputHeight = messageInput.scrollHeight\r\n\r\n//creates message element and return it\r\nconst createMessageElement = (content, ...classes) => {\r\n    const div = document.createElement(\"div\");\r\n    div.classList.add(\"message\", ...classes);\r\n    div.innerHTML = content;\r\n    return div;\r\n}\r\n\r\nconst generateBotResponse = async (incomingMessageDiv) => {\r\n    const messageElement = incomingMessageDiv.querySelector(\".message-text\")\r\n\r\n    //added user messages to chat history\r\n    chatHistory.push({\r\n        role: \"user\",\r\n        parts: [{ text: userData.message }, ...(userData.file.data ? [{ inline_data: userData.file }] : [])]\r\n    })\r\n\r\n\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"x-goog-api-key\": API_KEY, // Use the fetched API key here\r\n        },\r\n        body: JSON.stringify({\r\n            contents: chatHistory,\r\n        }),\r\n    };\r\n\r\n\r\n\r\n    try {\r\n        const response = await fetch(API_URL, requestOptions)\r\n        const data = await response.json();\r\n        if (!response.ok) throw new Error(data.error.message)\r\n\r\n        const apiResponseText = data.candidates[0].content.parts[0].text.replace(/\\*\\*(.*?)\\*\\*/g, \"$1\").trim();\r\n        messageElement.innerText = apiResponseText;\r\n\r\n        //added bot response to chatHistory\r\n        chatHistory.push({\r\n            role: \"model\",\r\n            parts: [{ text: apiResponseText }]\r\n        })\r\n    }\r\n    catch (error) { //handle error in api response\r\n        console.log(error);\r\n        messageElement.innerText = error.message;\r\n        messageElement.style.color = \"#ff0000\"\r\n    }\r\n    finally {\r\n        userData.file = {}\r\n        incomingMessageDiv.classList.remove(\"thinking\")\r\n        chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: \"smooth\" })\r\n    }\r\n\r\n}\r\n\r\n//handles outgoing user messages\r\nconst handleOutgoingMessage = (e) => {\r\n    e.preventDefault();\r\n    userData.message = messageInput.value.trim();\r\n    messageInput.value = \"\";\r\n    fileUploadWrapper.classList.remove(\"file-uploaded\")\r\n    messageInput.dispatchEvent(new Event(\"input\"))\r\n\r\n\r\n    //create and display user message\r\n    const messageContent = `<div class=\"message-text\"></div>\r\n                            ${userData.file.data ? `<img src=\"data:${userData.file.mime_type};base64,\r\n                            ${userData.file.data}\" class= \"attachment\" />` : \"\"} `;\r\n\r\n    const outgoingMessageDiv = createMessageElement(messageContent, \"user-message\");\r\n    outgoingMessageDiv.querySelector(\".message-text\").innerText = userData.message;\r\n    chatBody.appendChild(outgoingMessageDiv);\r\n    chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: \"smooth\" })\r\n\r\n    //displays dotPulse motion followed \r\n    setTimeout(() => {\r\n        const messageContent = `<svg class=\"bot-avatar\" xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 1024 1024\">\r\n                    <path\r\n                        d=\"M738.3 287.6H285.7c-59 0-106.8 47.8-106.8 106.8v303.1c0 59 47.8 106.8 106.8 106.8h81.5v111.1c0 .7.8 1.1 1.4.7l166.9-110.6 41.8-.8h117.4l43.6-.4c59 0 106.8-47.8 106.8-106.8V394.5c0-59-47.8-106.9-106.8-106.9zM351.7 448.2c0-29.5 23.9-53.5 53.5-53.5s53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5-53.5-23.9-53.5-53.5zm157.9 267.1c-67.8 0-123.8-47.5-132.3-109h264.6c-8.6 61.5-64.5 109-132.3 109zm110-213.7c-29.5 0-53.5-23.9-53.5-53.5s23.9-53.5 53.5-53.5 53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5zM867.2 644.5V453.1h26.5c19.4 0 35.1 15.7 35.1 35.1v121.1c0 19.4-15.7 35.1-35.1 35.1h-26.5zM95.2 609.4V488.2c0-19.4 15.7-35.1 35.1-35.1h26.5v191.3h-26.5c-19.4 0-35.1-15.7-35.1-35.1zM561.5 149.6c0 23.4-15.6 43.3-36.9 49.7v44.9h-30v-44.9c-21.4-6.5-36.9-26.3-36.9-49.7 0-28.6 23.3-51.9 51.9-51.9s51.9 23.3 51.9 51.9z\">\r\n                    </path>\r\n                </svg>\r\n                <div class=\"message-text\">\r\n                    <div class=\"message-text\">\r\n                        <div class=\"thinking-indicator\">\r\n                            <div class=\"dot\"></div>\r\n                            <div class=\"dot\"></div>\r\n                            <div class=\"dot\"></div>\r\n                        </div>\r\n                    </div>\r\n    \r\n                    </div>`\r\n\r\n        const incomingMessageDiv = createMessageElement(messageContent, \"bot-message\", \"thinking\");\r\n        chatBody.appendChild(incomingMessageDiv);\r\n        chatBody.scrollTo({ top: chatBody.scrollHeight, behavior: \"smooth\" })\r\n        generateBotResponse(incomingMessageDiv);\r\n\r\n    }, 300)\r\n\r\n\r\n}\r\n\r\n//handle Enter key press for sending messages\r\nmessageInput.addEventListener(\"keydown\", (e) => {\r\n    const userMessage = e.target.value.trim();\r\n    if (e.key === \"Enter\" && userMessage && !e.shiftKey && window.innerWidth > 768) {\r\n        handleOutgoingMessage(e);\r\n    }\r\n})\r\n\r\nmessageInput.addEventListener(\"input\", () => {\r\n    messageInput.style.height = `${initialInputHeight}px`\r\n    messageInput.style.height = `${messageInput.scrollHeight}px`\r\n    document.querySelector(\".chat-form\").style.borderRadius = messageInput.scrollHeight > initialInputHeight ? \"15px\" : \"32px\"\r\n})\r\n\r\n//handles file input change and preview the selected file\r\nfileInput.addEventListener(\"change\", () => {\r\n    const file = fileInput.files[0]\r\n    if (!file) return;\r\n\r\n    // used reader to convert file into base64 format\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n        fileUploadWrapper.querySelector(\"img\").src = e.target.result\r\n        fileUploadWrapper.classList.add(\"file-uploaded\")\r\n        const base64String = e.target.result.split(\",\")[1];\r\n\r\n        //storing file data in userData\r\n        userData.file = {\r\n            data: base64String,\r\n            mime_type: file.type\r\n        }\r\n\r\n        fileInput.value = \"\"\r\n    }\r\n\r\n    reader.readAsDataURL(file)\r\n})\r\n\r\nfileCancelButton.addEventListener(\"click\", () => {\r\n    userData.file = {};\r\n    fileUploadWrapper.classList.remove(\"file-uploaded\")\r\n})\r\n\r\n//Configuring Emoji Picker\r\nconst picker = new EmojiMart.Picker({\r\n    theme: \"light\",\r\n    skinTonePosition: \"none\",\r\n    previewPosition: \"none\",\r\n    onEmojiSelect: (emoji) => {\r\n        const { selectionStart: start, selectionEnd: end } = messageInput;\r\n        messageInput.setRangeText(emoji.native, start, end, \"end\")\r\n        messageInput.focus();\r\n    },\r\n    onClickOutside: (e) => {\r\n        if (e.target.id === \"emoji-picker\") {\r\n            document.body.classList.toggle(\"show-emoji-picker\")\r\n        }\r\n        else {\r\n            document.body.classList.remove(\"show-emoji-picker\")\r\n        }\r\n    }\r\n})\r\n\r\ndocument.querySelector(\".chat-form\").appendChild(picker)\r\n\r\nsendMessageButton.addEventListener(\"click\", (e) => handleOutgoingMessage(e))\r\n\r\ndocument.querySelector(\"#file-upload\").addEventListener(\"click\", () => fileInput.click());\r\n\r\nchatbotToggler.addEventListener(\"click\", () => document.body.classList.toggle(\"show-chatbot\"))\r\nchatbotToggler.addEventListener(\"click\", () => chatverseTitle.style.color = \"#5350c4\")\r\nchatbotToggler.addEventListener(\"click\", () => chatverseLogo.style.fill = \"#5350c4\")\r\n\r\ncloseChatbot.addEventListener(\"click\", () => document.body.classList.remove(\"show-chatbot\"))\r\ncloseChatbot.addEventListener(\"click\", () => chatverseTitle.style.color = \"#706db0\")\r\ncloseChatbot.addEventListener(\"click\", () => chatverseLogo.style.fill = \"#706db0\")\r\n\r\n\r\nconst modelViewer = document.querySelector('#robot-viewer');\r\nmodelViewer.addEventListener(\"click\", () => document.body.classList.toggle(\"show-chatbot\"))\r\nmodelViewer.addEventListener(\"click\", () => chatverseTitle.style.color = \"#5350c4\")\r\nmodelViewer.addEventListener(\"click\", () => chatverseLogo.style.fill = \"#5350c4\")\r\n\r\n\r\nvar typed = new Typed(\".typing\", {\r\n    strings: [\"\", \"Chat with me....\", \"Explore things by uploading an Image....\", \"Have conversation with me using emojis.....\", \"Tap on the bot to start the conversation....\"],\r\n    typeSpeed: 100,\r\n    BackSpeed: 60,\r\n    loop: true\r\n})\r\n\r\nconst chatverseTitle = document.querySelector(\".chatverse-title\")\r\nconst chatverseInfo = document.querySelector(\".typing\")\r\nconst chatverseLogo = document.querySelector(\".chatverse-logo\")\r\n\r\nchatverseTitle.addEventListener(\"mouseover\", () => {\r\n    chatverseInfo.style.color = \"#5a2bc1ff\";\r\n    chatverseLogo.style.fill = \"#5350c4\"\r\n\r\n})\r\n\r\nchatverseTitle.addEventListener(\"mouseout\", () => {\r\n    chatverseInfo.style.color = \"initial\";\r\n    chatverseLogo.style.fill = \"#706db0\"\r\n})\r\n\r\n\n\n//# sourceURL=webpack:///./src/script.js?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/script.js"]();
/******/ 	
/******/ })()
;